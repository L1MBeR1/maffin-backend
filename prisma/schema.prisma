// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bakery {
  id           Int      @id @default(autoincrement()) @map("bakery_id")
  address      String   @unique @db.Text
  phone        String   @unique @db.VarChar(20)
  openingHours String   @map("opening_hours") @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  ProductBakery ProductBakery[]

  @@map("bakery")
}

model ProductDiscount {
  id         Int      @id @default(autoincrement()) @map("product_discount_id")
  productId  Int      @unique @map("product_id")
  discountId Int      @map("discount_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  product  Product  @relation(fields: [productId], references: [id])
  discount Discount @relation(fields: [discountId], references: [id])

  @@map("product_discount")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String?  @db.VarChar(100)
  description  String?  @db.Text
  price        Decimal? @db.Decimal(10, 2)
  categoryId   Int?     @map("category_id")
  isGlutenFree Boolean? @default(false) @map("is_gluten_free")
  isVegan      Boolean? @default(false) @map("is_vegan")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  category        Category?        @relation(fields: [categoryId], references: [id])
  ProductDiscount ProductDiscount?
  ProductBakery   ProductBakery[]
  OrderItem       OrderItem[]
  Feedback        Feedback[]

  @@map("product")
}

model UserRole {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_role")
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String?  @map("first_name") @db.VarChar(50)
  lastName   String?  @map("last_name") @db.VarChar(50)
  patronymic String?  @db.VarChar(50)
  email      String   @unique @db.VarChar(100)
  phone      String?  @unique @db.VarChar(20)
  password   String   @db.VarChar(100)
  gender     Gender?
  isBlocked  Boolean  @default(false) @map("is_blocked")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  addresses Address[]
  orders    Order[]
  feedbacks Feedback[]
  roles     UserRole[]

  @@map("user")
}

enum Gender {
  man
  woman
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(50)
  description String    @db.Text
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("category")
}

model Address {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  address   String   @db.VarChar(255)
  city      String   @db.VarChar(100)
  state     String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  @@map("address")
}

model ProductBakery {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("product_id")
  bakeryId      Int      @map("bakery_id")
  stockQuantity Int      @map("stock_quantity")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  bakery  Bakery  @relation(fields: [bakeryId], references: [id])

  @@map("product_bakery")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  productId Int      @map("product_id")
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_item")
}

model Discount {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  description  String?  @db.Text
  discountType String   @map("discount_type") @db.VarChar(20) //TODO:
  value        Decimal  @db.Decimal(10, 2)
  startDate    DateTime @map("start_date") @db.Timestamp(0)
  endDate      DateTime @map("end_date") @db.Timestamp(0)
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  ProductDiscount ProductDiscount[]

  @@map("discount")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  productId Int      @map("product_id")
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("feedback")
}

model Order {
  id           Int       @id @default(autoincrement())
  userId       Int       @map("user_id")
  totalAmount  Decimal?  @map("total_amount") @db.Decimal(10, 2)
  cost         Decimal?  @db.Decimal(10, 2)
  status       String?   @db.VarChar(20)
  isCart       Boolean   @default(true) @map("is_cart")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  completed_at DateTime? @db.Timestamp(0) //TODO:

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("order")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      Roles?   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  UserRole UserRole[]

  @@map("role")
}

enum Roles {
  user
  admin
  collector
}
